name: Deploy Contracts

on:
  push:
    branches: [main]
    paths:
      - 'apps/contracts/**'
      - 'package.json'
      - 'pnpm-lock.yaml'

concurrency:
  group: deploy-contracts-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-testnet:
    name: Deploy to Testnet
    runs-on: ubuntu-latest
    environment: testnet
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Turborepo cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: turbo-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            turbo-${{ runner.os }}-

      - name: Compile contracts
        run: pnpm contracts:compile
        env:
          NODE_ENV: production

      - name: Deploy to Moonbase Alpha
        run: pnpm contracts:deploy --network moonbase
        env:
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
          MOONBASE_RPC_URL: ${{ secrets.MOONBASE_RPC_URL }}
        working-directory: apps/contracts

      - name: Deploy to Rococo
        run: pnpm contracts:deploy --network rococo
        env:
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
          ROCOCO_RPC_URL: ${{ secrets.ROCOCO_RPC_URL }}
        working-directory: apps/contracts

      - name: Verify contracts
        run: pnpm contracts:verify
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
          MOONSCAN_API_KEY: ${{ secrets.MOONSCAN_API_KEY }}
        working-directory: apps/contracts

      - name: Save deployment artifacts
        uses: actions/upload-artifact@v3
        with:
          name: contract-deployments
          path: apps/contracts/deployments/
          retention-days: 90

  deploy-mainnet:
    name: Deploy to Mainnet
    runs-on: ubuntu-latest
    environment: mainnet
    needs: deploy-testnet
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Turborepo cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: turbo-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            turbo-${{ runner.os }}-

      - name: Compile contracts
        run: pnpm contracts:compile
        env:
          NODE_ENV: production

      - name: Deploy to Polygon
        run: pnpm contracts:deploy --network polygon
        env:
          PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
          POLYGON_RPC_URL: ${{ secrets.POLYGON_RPC_URL }}
        working-directory: apps/contracts

      - name: Deploy to Moonbeam
        run: pnpm contracts:deploy --network moonbeam
        env:
          PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
          MOONBEAM_RPC_URL: ${{ secrets.MOONBEAM_RPC_URL }}
        working-directory: apps/contracts

      - name: Verify contracts
        run: pnpm contracts:verify
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
          POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}
          MOONSCAN_API_KEY: ${{ secrets.MOONSCAN_API_KEY }}
        working-directory: apps/contracts

      - name: Save deployment artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mainnet-contract-deployments
          path: apps/contracts/deployments/
          retention-days: 365

      - name: Notify Slack on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Smart contracts deployed successfully! üîó'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'Smart contract deployment failed! ‚ùå'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
